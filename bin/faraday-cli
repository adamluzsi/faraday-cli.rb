#!/usr/bin/env ruby
if ENV['FARADAY_CLI_DEVELOPER_ENV'] == 'true'
  $LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
end

require 'faraday/cli'

CLI_OPTIONS = Faraday::CLI::Option::Parser.new.parse!
Faraday::CLI::Option::Validator.validate(CLI_OPTIONS)

is_verbose = !CLI_OPTIONS[:flags].include?(:silent) && CLI_OPTIONS[:flags].include?(:verbose)

connection = Faraday.new do |builder|
  builder.use Faraday::Response::RaiseError

  unless CLI_OPTIONS[:flags].include?(:without_middlewares)
    Faraday::CLI::MiddlewareFetcher.extend!(builder, *CLI_OPTIONS[:config_file_paths])
  end

  builder.request(:multipart) if CLI_OPTIONS[:flags].include?(:multipart)

  if is_verbose
    builder.use Faraday::CLI::Middleware::VerboseRequest
    builder.response :logger
  end

  builder.adapter(:net_http)
end

if CLI_OPTIONS[:flags].include?(:show_middlewares)
  $stdout.puts(connection.builder.handlers.map(&:inspect))
  exit
end

FARADAY_ACTIVE_CONNECTION= connection
def active_connection
  FARADAY_ACTIVE_CONNECTION
end

begin

  response = connection.public_send(CLI_OPTIONS[:http_method].downcase) do |request|

    raise('Missing URL for request!') if ARGV[0].nil?
    request.url(ARGV[0])

    CLI_OPTIONS[:http_headers].each do |key, value|
      request.headers[key]=value
    end

    CLI_OPTIONS[:params].each do |key, value|
      request.params[key]=value
    end

    request.body = CLI_OPTIONS[:body] unless CLI_OPTIONS[:body].nil?

  end

  $stdout.puts(Faraday::CLI::ResponseFormatter.format(response, *CLI_OPTIONS[:flags]))

rescue Faraday::Error => ex
  $stdout.puts(ex.message)
  exit(1)

rescue URI::InvalidURIError => ex
  $stdout.puts(ex.message)
  exit(1)

end